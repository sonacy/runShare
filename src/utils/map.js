export function createMap () {
  return new Promise((resolve, reject) => {
    window.init = function () {
      if (window.AMap) {
        resolve('amap load success')
      } else {
        reject(new Error('amap load fail'))
      }
    }

    if (window.AMap) {
      resolve('amap load aready')
    } else {
      let script = document.createElement('script')
      script.type = 'text/javascript'
      script.src =
        '//webapi.amap.com/maps?v=1.4.2&key=&callback=init' // 高德地图
      script.id = 'AMap'
      document.querySelector('head').appendChild(script)
      script.onerror = function () {
        reject(new Error('amap load error'))
      }
    }
  })
}

const colors = [
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [2, 207, 149],
  [3, 207, 148],
  [7, 207, 147],
  [9, 208, 147],
  [12, 208, 146],
  [14, 207, 145],
  [17, 207, 143],
  [19, 207, 143],
  [22, 207, 141],
  [24, 207, 141],
  [28, 208, 141],
  [30, 207, 139],
  [32, 207, 138],
  [35, 208, 138],
  [37, 207, 137],
  [40, 207, 135],
  [43, 208, 135],
  [45, 207, 134],
  [48, 208, 133],
  [51, 208, 132],
  [53, 208, 132],
  [56, 208, 130],
  [58, 208, 129],
  [61, 208, 128],
  [63, 208, 127],
  [66, 208, 126],
  [69, 209, 126],
  [71, 208, 125],
  [74, 208, 124],
  [76, 208, 123],
  [79, 208, 122],
  [81, 208, 121],
  [85, 208, 120],
  [86, 208, 119],
  [90, 208, 118],
  [92, 209, 118],
  [95, 209, 117],
  [97, 208, 116],
  [100, 208, 114],
  [102, 209, 114],
  [104, 208, 113],
  [107, 209, 112],
  [110, 209, 112],
  [113, 209, 110],
  [115, 209, 109],
  [118, 209, 109],
  [120, 209, 108],
  [123, 209, 107],
  [126, 209, 106],
  [128, 209, 105],
  [131, 209, 104],
  [133, 210, 104],
  [136, 210, 103],
  [138, 209, 101],
  [141, 209, 100],
  [144, 209, 100],
  [146, 209, 98],
  [149, 209, 98],
  [152, 210, 97],
  [154, 209, 96],
  [157, 209, 95],
  [159, 210, 94],
  [162, 210, 93],
  [164, 210, 92],
  [167, 210, 92],
  [169, 210, 90],
  [172, 210, 90],
  [175, 210, 89],
  [178, 210, 88],
  [180, 210, 87],
  [182, 210, 86],
  [185, 210, 85],
  [187, 210, 84],
  [191, 210, 83],
  [193, 211, 83],
  [196, 210, 81],
  [198, 210, 80],
  [201, 210, 80],
  [203, 210, 79],
  [205, 210, 78],
  [209, 211, 77],
  [211, 210, 76],
  [214, 211, 75],
  [217, 211, 75],
  [219, 211, 74],
  [221, 210, 72],
  [224, 210, 71],
  [227, 211, 71],
  [229, 210, 69],
  [232, 211, 69],
  [234, 211, 69],
  [237, 211, 67],
  [239, 211, 66],
  [242, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 211, 65],
  [243, 210, 65],
  [243, 208, 65],
  [243, 205, 66],
  [242, 203, 66],
  [242, 201, 67],
  [243, 200, 68],
  [242, 197, 68],
  [242, 195, 68],
  [241, 192, 68],
  [242, 190, 69],
  [241, 187, 69],
  [241, 186, 70],
  [242, 184, 71],
  [241, 182, 71],
  [241, 179, 71],
  [241, 178, 72],
  [240, 175, 72],
  [240, 173, 73],
  [240, 171, 73],
  [240, 168, 73],
  [240, 167, 74],
  [240, 165, 75],
  [240, 163, 75],
  [239, 160, 75],
  [239, 158, 75],
  [239, 156, 76],
  [239, 153, 76],
  [239, 152, 77],
  [239, 150, 78],
  [239, 147, 78],
  [238, 145, 78],
  [239, 143, 79],
  [238, 141, 79],
  [238, 139, 80],
  [238, 136, 80],
  [238, 134, 80],
  [238, 132, 81],
  [238, 131, 82],
  [238, 129, 82],
  [237, 126, 82],
  [237, 123, 82],
  [237, 121, 83],
  [236, 119, 83],
  [237, 117, 84],
  [237, 116, 85],
  [236, 113, 85],
  [236, 110, 85],
  [236, 109, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86],
  [236, 108, 86]
]

// 根据速度计算颜色
function calculate (t) {
  const min = 3.5
  const max = 12
  let ret
  if (t <= min) {
    ret = `rgb(${colors[colors.length - 1][0]},${
      colors[colors.length - 1][1]
    },${colors[colors.length - 1][2]})`
  } else if (t >= max) {
    ret = `rgb(${colors[0][0]},${colors[0][1]},${colors[0][2]})`
  } else {
    const space = (max - t) / (max - min)
    const color = colors[parseInt(((colors.length - 1) * space * 10 + 5) / 10)]
    ret = `rgb(${color[0]},${color[1]},${color[2]})`
  }

  return ret
}

// 生成一组颜色
export function generateColors (points) {
  let l = 0
  let ret = []
  points = points.slice()
  points.forEach((point, index) => {
    if (parseInt(point.tostartdistance / 1e3) > l) {
      ret[l] = index
      l++
    }
  })

  for (let i = 0; i < ret.length; i++) {
    let j = i === 0 ? 0 : ret[i - 1] + 1
    const t =
      (points[ret[i]].tostartcostTime - points[j].tostartcostTime) /
      6e4 /
      ((points[ret[i] - 1].tostartdistance - points[j].tostartdistance) / 1e3)
    const color = calculate(t)

    for (; j <= ret[i]; j++) {
      points[j].color = color
    }
  }
  return points
}

class Position {
  constructor (west, north, east, south) {
    this.west = Math.min(west, east)
    this.north = Math.max(north, south)
    this.east = Math.max(west, east)
    this.south = Math.min(north, south)
  }

  compare (longitude, latitude) {
    return (
      this.west <= longitude &&
      this.east >= longitude &&
      this.north >= latitude &&
      this.south <= latitude
    )
  }
}

function isIn (longitude, latitude) {
  for (let n = 0; n < c.length; n++) {
    if (c[n].compare(longitude, latitude)) {
      for (let i = 0; i < p.length; i++) {
        if (p[i].compare(longitude, latitude)) return false
      }
      return true
    }
  }
  return false
}

function n (t, e) {
  let a = -100 +
    2 * t +
    3 * e +
    0.2 * e * e +
    0.1 * t * e +
    0.2 * Math.sqrt(Math.abs(t))
  return (
    (a += (2 * (20 * Math.sin(6 * t * pi) + 20 * Math.sin(2 * t * pi))) / 3),
    (a += (2 * (20 * Math.sin(e * pi) + 40 * Math.sin((e / 3) * pi))) / 3),
    (a +=
      (2 * (160 * Math.sin((e / 12) * pi) + 320 * Math.sin((e * pi) / 30))) / 3)
  )
}

function i (t, e) {
  let a =
    300 + t + 2 * e + 0.1 * t * t + 0.1 * t * e + 0.1 * Math.sqrt(Math.abs(t))
  return (
    (a += (2 * (20 * Math.sin(6 * t * pi) + 20 * Math.sin(2 * t * pi))) / 3),
    (a += (2 * (20 * Math.sin(t * pi) + 40 * Math.sin((t / 3) * pi))) / 3),
    (a +=
      (2 * (150 * Math.sin((t / 12) * pi) + 300 * Math.sin((t / 30) * pi))) / 3)
  )
}

export function generatePos (longitude, latitude) {
  if (!isIn(longitude, latitude)) {
    return [longitude, latitude]
  }

  const s = n(longitude - 105, latitude - 35)
  const c = i(longitude - 105, latitude - 35)
  const pp = (latitude / 180) * pi
  let deg = Math.sin(pp)

  deg = 1 - l * deg * deg
  const u = Math.sqrt(deg)

  const ss = (180 * s) / (((radius * (1 - l)) / (deg * u)) * pi)
  const cc = (180 * c) / ((radius / u) * Math.cos(pp) * pi)

  return [longitude + cc, latitude + ss]
}

const pi = 3.141592653589793
const radius = 6378245
const l = 0.006693421622965943
const c = [
  new Position(79.4462, 49.2204, 96.33, 42.8899),
  new Position(109.6872, 54.1415, 135.0002, 39.3742),
  new Position(73.1246, 42.8899, 124.143255, 29.5297),
  new Position(82.9684, 29.5297, 97.0352, 26.7186),
  new Position(97.0253, 29.5297, 124.367395, 20.414096),
  new Position(107.975793, 20.414096, 111.744104, 17.871542)
]
const p = [
  new Position(119.921265, 25.398623, 122.497559, 21.785006),
  new Position(101.8652, 22.284, 106.665, 20.0988),
  new Position(106.4525, 21.5422, 108.051, 20.4878),
  new Position(109.0323, 55.8175, 119.127, 50.3257),
  new Position(127.4568, 55.8175, 137.0227, 49.5574),
  new Position(131.2662, 44.8922, 137.0227, 42.5692)
]
